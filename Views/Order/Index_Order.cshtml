@*https://localhost:7210/Order/Index_Order*@
@model Restaurant.Models.OrderView
@{
    ViewData["Title"] = "訂餐";
}

<div class="container mt-5 ">
    <form asp-action="Index_Order" method="post" class="p-4 border bg-light needs-validation rounded" style="max-width: 500px; margin: auto;" novalidate>

        @if (ViewData.ModelState["OrderTypeError"] != null)
        {
            <div class="error-message">
                <label style="color:red">@ViewData.ModelState["OrderTypeError"].Errors[0].ErrorMessage</label>
            </div>
        }

        @if (ViewData.ModelState["TakeoutOrderError"] != null)
        {
            <div class="error-message">
                <label style="color:red">@ViewData.ModelState["TakeoutOrderError"].Errors[0].ErrorMessage</label>
            </div>
        }

        @if (ViewData.ModelState["DeliveryOrderError"] != null)
        {
            <div class="error-message">
                <label style="color:red">@ViewData.ModelState["DeliveryOrderError"].Errors[0].ErrorMessage</label>
            </div>
        }

        @if (ViewData.ModelState["OrderRestaurantError"] != null)
        {
            <div class="error-message">
                <label style="color:red">@ViewData.ModelState["OrderRestaurantError"].Errors[0].ErrorMessage</label>
            </div>
        }

        <div class="d-flex align-items-center">
            @Html.HiddenFor(model => model.OrderCustomerId, new { name = "orderCustomerId" })
            <div class="mt-3 flex-grow-1 me-3">
                @Html.DisplayNameFor(model => model.OrderType)
            </div>

            @foreach (var orderType in new[] { new { Id = "TakeOut", Label = "外帶" }, new { Id = "Delivery", Label = "外送" }, new { Id = "DineIn", Label = "內用" } })
            {
                if (((List<string>)ViewBag.AllowedOrderTypes).Contains(orderType.Id))
                {
                    <div class="mt-3 flex-grow-1">
                        @Html.RadioButtonFor(model => model.OrderType, orderType.Id, new { @class = "form-check-input", id = orderType.Id })
                        <label for="@orderType.Id" class="form-check-label">@orderType.Label</label>
                    </div>
                }
            }
            @Html.ValidationMessageFor(model => model.OrderType, "", new { @class = "text-danger" })
        </div>

        <div class="mt-3">
            <div class="mt-3">
                @Html.CheckBox("fetchData", new { id = "fetchData" })
                <label class="form-check-label" for="fetchData">是否同會員資料</label>
            </div>

            <div class="mt-3">
                <label>@Html.DisplayNameFor(model => model.OrderName)</label>
                @Html.EditorFor(model => model.OrderName, new { htmlAttributes = new { @class = "form-control", id = "CustomerName" } })
                @*@Html.ValidationMessageFor(model => model.OrderName, "", new { @class = "text-danger" })*@
            </div>

            <div class="mt-3">
                <label>@Html.DisplayNameFor(model => model.OrderPhone)</label>
                @Html.EditorFor(model => model.OrderPhone, new { htmlAttributes = new { @class = "form-control", id = "CustomerPhone" } })
                @*@Html.ValidationMessageFor(model => model.OrderPhone, "", new { @class = "text-danger" })*@
            </div>
        </div>
        <div class="mt-3">
            <label>@Html.DisplayNameFor(model => model.OrderRestaurantId)</label>
            @Html.DropDownListFor(model => model.OrderRestaurantId, ViewBag.OrderRestaurantId as List<SelectListItem>, "請選擇餐廳", new { @class = "form-control", id = "OrderRestaurantId" })
            @*@Html.ValidationMessageFor(model => model.OrderRestaurantId, "", new { @class = "text-danger" })*@
        </div>
        <br />
        <label>@Html.DisplayNameFor(model => model.OrderAddress)</label>
        <div class="d-flex align-items-center">
            <div class="mt-3 flex-grow-1 me-3">
                @Html.DropDownListFor(model => model.RegionAddress, ViewBag.RegionList as List<SelectListItem>, "請選擇區域", new { @class = "form-control", id = "RegionAddress", disabled = "disabled" })
            </div>
            <div class="mt-3 flex-grow-1">
                @Html.EditorFor(model => model.StreetAddress, new { htmlAttributes = new { @class = "form-control", id = "StreetAddress", placeholder = "請輸入訂餐地址" } })
            </div>
            <br />
            @*@Html.ValidationMessageFor(model => model.StreetAddress, "", new { @class = "text-danger" })*@
        </div>

        <br />
        <label style="color:red">外送範圍僅限餐廳所在行政區</label>
        <br />
        <label style="color:red">選擇現場付款者需到櫃台結帳後，方開始備餐</label>
        <br />
        <label style="color:red">如需外帶外送者請登入會員後再點餐</label>
        <br />
        <br />
        <div class="text-center">
            <button type="submit" class="btn btn-primary">下一頁</button>
        </div>
    </form>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            // 當網頁載入完成後執行此函式

        var isLoggedIn = @Json.Serialize(User.Identity.IsAuthenticated); // 檢查用戶是否登入

        if (!isLoggedIn) {
            $("#fetchData").prop("disabled", true); // 禁用 checkbox
        }

            $("#fetchData").change(function () {
                // 監聽 id 為 fetchData 的元素（例如 checkbox）變更事件

                if ($(this).is(":checked")) {
                    // 如果 checkbox 被勾選，發送 AJAX 請求

                    $.ajax({
                        url: '@Url.Action("GetCustomerData", "Order")',
                        // 指定要請求的後端控制器和動作方法

                        type: 'GET',
                        // 使用 GET 方法請求數據

                        dataType: 'json',
                        // 預期後端回傳 JSON 格式的資料

                        success: function (data) {
                            // 如果請求成功並收到數據

                            if (data) {
                                // 確保收到的數據不為空
                                $("#CustomerName").val(data.customerName);
                                // 將顧客名稱填入對應的輸入框

                                $("#CustomerPhone").val(data.customerPhone);
                                // 將顧客電話填入對應的輸入框
                            }
                        },
                        error: function () {
                            // 如果請求失敗，顯示錯誤提示
                            alert("讀取會員資料時發生錯誤");
                        }
                    });

                } else {
                    // 如果 checkbox 取消勾選，清空顯示的客戶資料
                    $("#CustomerName").val("");
                    $("#CustomerPhone").val("");
                }
            });

            $("#OrderRestaurantId").change(function () {
            // 監聽 餐廳下拉選單 (id = OrderRestaurantId) 變更事件
            var restaurantId = $(this).val();
            // 取得使用者選擇的餐廳 ID

            if (restaurantId) {
                // 確保選擇了有效的餐廳

                $.ajax({
                    url: '@Url.Action("GetRegionByRestaurant", "Order")',
                    // 呼叫後端的 GetRegionByRestaurant 方法

                    type: 'POST',
                    data: { restaurantId: restaurantId },
                    // 傳遞選擇的餐廳 ID 給後端

                    success: function (response) {
                        // 當請求成功時

                        if (response.success) {
                            // 如果後端回傳的 success 為 true
                            $("#RegionAddress").empty().append(new Option(response.text, response.text, true, true));
                            // 清空下拉選單，並新增一個選項（填入回傳的區域名稱）
                        } else {
                            alert("無法取得餐廳區域");
                            // 如果請求成功但沒有找到區域，顯示錯誤提示
                        }
                    },
                    error: function () {
                        // 當 AJAX 請求失敗時
                        alert("請求失敗，請稍後再試");
                    }
                });

            } else {
                // 如果沒有選擇餐廳，將下拉選單重置為「請選擇區域」
                $("#RegionAddress").empty().append(new Option("請選擇區域", ""));
            }
        });

            $("input[name='OrderType']").change(function () {
                toggleStreetAddress();
            });

            function toggleStreetAddress() {
                if ($("#Delivery").is(":checked")) {
                    $("#CustomerName").prop("disabled", false);
                    $("#CustomerPhone").prop("disabled", false);
                    $("#StreetAddress").prop("disabled", false);
                    $("#RegionAddress").prop("disabled", false);
                    $("#fetchData").prop("disabled", false);
                }
                else if ($("#DineIn").is(":checked")) {
                    $("#CustomerName").prop("disabled", true);
                    $("#CustomerPhone").prop("disabled", true);
                    $("#StreetAddress").prop("disabled", true);
                    $("#StreetAddress").val(""); // 清空地址欄位
                    // 當內用被選擇時，將 RegionAddress 設為空值並禁用
                    $("#RegionAddress").val("").prop("disabled", true);
                    $("#fetchData").prop("checked", false).prop("disabled", true); // 取消勾選並禁用
                }
                else if ($("#TakeOut").is(":checked")) {
                    $("#CustomerName").prop("disabled", false);
                    $("#CustomerPhone").prop("disabled", false);
                    $("#StreetAddress").prop("disabled", true);
                    $("#StreetAddress").val(""); // 清空地址欄位
                    $("#RegionAddress").val("").prop("disabled", true);
                    $("#fetchData").prop("disabled", false);
                }
            }

            // 頁面載入時執行（避免預設選中時沒有觸發變更）
            toggleStreetAddress();

        });
    </script>
}